    <<计算机程序设计的构造和解释>>
    
    0. 基本看法
        数学 为精确处理 符号/理论 是什么的问题。
        计算 为精确处理 实践 要怎么做的问题。

      .1  课程的语言选择：LISP
            Lisp的特点：（思想依赖语言表达，语言本身就带了思想的，所以语言层面要弱化对思想的束缚）
                几乎没有语法，简单的像象棋规则，最小限度的依赖语言。
           
      .2  什么是程序设计真正的问题？
                .2.1  需要去计算什么？
                .2.2  怎么将问题拆分成可控粒子？
                .2.3  如何开展分解工作？

       .3 怎么思考问题？ 
            前提：努力去把问题用简单的话来描述。
            怎么把问题简单化：
                
                1.（组合也是一种创新，缝合怪就是新物种，杂交就是这个原理）
                    组合法： 排列组合( a算法/部件(a公司提供) +b算法/部件(b公司提供)  =d（产出）)
                
                2. (抄袭和剔除)
                    对照法 ：我觉得这个不错，我们抄一个，但是它这里的算法很烂，千万不要抄。
                
                3.（让我们歌颂圣经吧，降唯打击，本质就是你的脑子长了一个和别人不一样的想法）
                    抽象法

    希望得到什么？（普适于通用的工程化设计）
        
        1.无关语言设计，无关算法过程，无关性能优化，仅是学习一些能够用于控制大型软件系统的思维方式。
        
        2.能够去读50页长的程序，只要该程序是以一种值得模仿的形式去写出来。
                2.1  明白什么是好的可读代码
                2.2  明白哪些东西需要读，哪些东西不需要了解
                2.3  明白怎么抄代码，并且能保持作者的精神和风格

    好的面向过程程序设计语言是怎么样的？
            能帮助我们去思考怎么简化问题，怎么用简单的语言来描述问题的就是好语言。

        .1  能指导计算机执行任务
        .2  是能成为我们提供一种 方便组织表达计算过程的框架
        .3  -- 每一种语言都为此提供了三种机制
                .3.1 基本表达形式 (语言所关系的最简单的个体)
                .3.2  组合的方法 (怎么通过基本表达式出发组成更复杂的元素)
                .3.3  抽象(为复合对象命名，并将它们当作单元去操作)
        
        .4  程序设计中的的两个要素：数据和过程(函数)
                 数据是用来描述"东西"
                 过程是怎么操作这些"东西"的规则
                
                 任何强有力的程序设计语言都必须能表述基本的数据和基本的过程。
                 --内置数据类型 --内置函数          
    
    程序设计语言中的函数：
          计算机中的函数，就是实际上数学的函数，不过要保证有解，
          看上去是一个封装好的形式符号，到了计算机底层都是数字，不过是这些数字带有特殊的意义。
          
    计算机和数学的关系？
        一些公理或假设是在被证明之后才能成立的，
        证明一个假设成立需要大量的计算过程和数据支撑，这是计算机做的
        证明之后的结论，可以直接拿来当业务(结论)使用。
        --业务也是一样东西，就是需要大量计算支撑和数据来支撑的。

        --计算机中的业务总是人为创造的，过程只能不断完善，而趋向稳定，过程不能是完美。
    
    模块化思想：
        1. 用户只关系我们保留出去的可调用接口，接口内部的实现不应该是用户关系的话题。
        2. 为什么要封包隔离，封对象隔离，因为不隔离的话，有可能对用户使用有影响，
                比如：
                    你莫名奇妙搞个全局函数 aa ，但是这个是你内部相关的函数，不是最终用户接口。
                    用一天用户用了你的第三方模块，用户也想起一个aa的函数，结果莫名其妙报错。
                    
    lambda 表达式: (提取一个过程中的私有的部分)
        lambda表达式：本质就是一个函数，而且是一个不具有通用价值的函数。
        用lambda表达式做参数： 提取出函数的特征部分，把这些状态保存在一个lambda函数里面，然后公共部分就能用common函数来表示了。


    函数相关的坑?
        函数之间的变量传递？
        高阶函数的使用？(函数做参数，做返回值)
        闭包
        回调函数

    程序和下棋的区别？
        你会下棋，懂规则，不等于你可以成为高手，不知道经典的开局，战术和策略。
            先手在编程时会犯什么错误？
            不知道编程领域中各种欧冠你有用的常见的模式，不知道先写什么容易做出产品。    
                类比：
            赢得棋局： 做出产品
            下棋过程： 写代码过程
            下棋规则： 语法规则
经典开局、战术和策略： 编程领域设计模式   
            棋步价值： 封装成过程之后的效果

        怎么成为程序设计专家？
            1.  对计算过程中各种动作的进行情况作出规划，用一个程序去控制这一个过程的发展。
            2.  看清各种不同种类的过程会产生什么样的计算过程。
            3.  只有在掌握了这种技能之后，我们才能学会如何构造出可靠的程序，使之能够表现出所需要的行为。

        什么是函数是一等公民的思想?
            函数：描述了具有普遍性的思想的表述。
            复合过程/函数: 函数只是我们将分工分块的表述方式。
            程序员，要想办法提取出函数的公共部分(看看别人有没有好的算法实现)
            
            一般而言，程序设计语言总会会计算元素的可能使用方式强加上某些限制。带有最少限制的元素
            被称为具有第一级的状态。/也就是一等公民。

            一等公民的权利：
                1.可用于变量命名
                2.可以作为过程的参数
                3.可以作为过程的结果返回
                4.可以包含在数据结构中
     
     &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&抽象&&&&&&&&&&&&&&&&& 
        
        抽象的意义:
             .1  建立最基本的概念的抽象后，留给后人一条跟着我发展的道路。
             .2  
        
        过程抽象:
            通过把过程作为参数的高阶函数用法，把函数的特征部分用lambda表达式封装起来，
            用的时候把它作为实际参数传递即可。
        
        数据抽象:
            怎么自定义一个复合数据对象，该数据对象怎么由更基本的数据对象构造起来的细节隔离开?
                1.设法构造出一些使用复合数据对象的程序，并且暴露一些数据操作的原子过程。
                2.起码包括内部数据的获取 和 数据对象的创建函数。

            数据抽象将如何使我们能在程序的不同部分之间建立起适当的抽象屏障。
            
            一般而言，数据抽象的基本思想就是每一类数据对象标识出一组操作。

                
             
----------------------------------------------------------------------------------------------------
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&正文&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
-------------------------------------------第一章  构造过程抽象-------------------------------------------
    
    别质疑，先相信。
        我们是魔法师，
        计算过程就是一个黑魔法，
        我们 写下 一系列的咒语(程序的规则模式)，
        咒语无误，魔法成功。
        咒语错误，可能产生复杂而无法预料的后果。
        (fuck！shit ！only a shit！)
    --但是不幸的是，我们不是魔法师，程序设计有大量安全性检查，程序设计有大量设计规则可以参考，
      有大量前置魔法师的经验和智慧可以参考，如果魔法师变得非常多了，那么魔法吟唱就会沦为生产工具。
    
    --那我们为什么还要学习魔法？ 
      可以当传道士，可以当兜售圣经的人，可以当高产工具人，对不起 Alan J. Perlls ，我吃不起饭了。
    
    ！！！！！！！！！！！！！！！！！！！lisp 编程！！！！！！！！！！！！！！！！！！！！！！！！
                        计算过程可以用语法规则来抽象，比如函数就是对过程的封装。
                                    面向过程 约等于 面向函数编程     
        Lisp 是面向过程的代表性语言，
        lisp 语法可以表达递归方程，
        递归方程可以作为计算模型，
        计算过程Lisp描述(lisp中的过程)本身可以作为Lisp的数据来表示和操作。
        面向过程， 适合编写将其他程序作为数据去操作的程序，例如解释器和编译器。
        
    
    程序设计中的的两个要素：数据和过程(函数)
        数据是用来描述"东西"
        过程是怎么操作这些"东西"的规则

        ----------------------------Scheme 语言----------------------------------------
    1.1.1 表达式 
        （+ 137 349）
        486
        （+ 21 35 12 7）
         75
          ...
        这种表示是表达式规则中的个例，成为组合式，用于表示一个过程应用。
        最左边的是运算符，其他是运算符对象。
        将运算符放在运算对象左边的形式1成为前缀表示。
        
        前缀表示的好处：
            可以谁便套层次，但是不会乱序执行
            （+（* 3 5）(- 10 6))
        
        为了更好的人类可读性：
            
    (+(* 3
        (+ (* 2 4)
            (+ 3 5))) 
        (+ (- 10 7）
            6))

        -- 读是可以读，就是有点痛苦，简单是真的简单。
    
    1.1.2 命名和环境
        给事物命名通过define(定义)的方式完成，
        （ define size 2）
        
        会导致解释器将值2与名字size相关联
        
        面向过程里面，其实关键字也是调用函数实现的。

    1.1.3 表达式计算，使用树形结构，树形积累，如果用了变量，请确保在语义分析的时候它是有效的，已经定义了的。

    1.1.4 复合过程/复合函数 
          
          怎么定义函数/过程？
            1.1.4.1 数和算数运算符和关键字是基本的数据和过程
            1.1.4.2 嵌套提供了一种组织起多个操作的方法
            1.1.4.3 定义是一种受限的抽象手段，起一个名字就可以关联一个符合的过程。
                -- 有了这种复合，就可以把一段代码，当作一个单元使用，在没有考虑并发的情况下。

            demo:
            (define (square x) （* x x） )
                这个过程，表示的是将一个东西自乘。
            定义过程的语法规则：
                (define <name> <formal paramers> <body> )
                <name> 标识符
                < formal paramers> 参数列表
                < body> 过程体 --一个表达式
                
                (square 21) ==> 441
                (square (+ 2 5)) ==> 7
                (+ (square x) (square y) ) ==> 

                (define (sum-of-squares x y) (+ (square x) (square y))) 
                调用 (sum-of-squares 3 4)
                
    1.1.5 过程应用的代换模型
        
        我们的思考很容易认为： --代换模型
            (sum-of-squares (+ a 1) (* a 2))
            (sum-of-squares (+ 5 1) (* 5 2))
            (+ (square 6) (square 10) )
            (+ (* 6 6) (* 10 10))
            (+ 36 100)i

            可以先求值，再展开表达公式(应用序) ，也可以先展开表达赋值，再计算(正则式)
            == 顺序不同可以导致最终结果不一致。( Lisp 采用应用序)

        但是编译器/解释器不是这样玩的，
        不能直接说换就换，它不是宏定义，它们一般是提供形式参数的局部环境的方式。
                
        
     1.1.6  条件表达式和謂词
            
            也就是分支结构

            (define (abs x) (cond ((> x 0) x)
                                  ((= x 0) 0)
                                  ((< x 0) -x)  ))
            cond (<p1> <e1>) --cond 关键字
                 (<p2> <e2>) --<p1> 谓词
                 (<p3> <e3>) -- <e> 序列表达式<e>
                 (<p4> <e4>)
            
            遇到真p为真就返回e的值

            (define (abs x) (cond ((< x 0) (-x))) 
                                   (else x)))

            用自然语言来说，"如果x小于0就返回-x，否则就返回x"
        
            (define (abs x)
                (if (< x 0) (-x) x)
            )
             (if <predicate> <consequent> <alternative>)
            在求值一个if表达式时，解释器从求值其<predicate>部分开始，如果<predicate>得到真值，
            解释器就去求值<consequent>并返回值，否则去求值<alternative> 并返回其值。
                除了一批基本谓词如<、=和 >之外，还有一些逻辑复合运算符，利用它们可以构造出各种复合谓词。
                    最常用的三个符合运算符：
                    (and <e1>...<en>)
                    解释器将从左到右一个个地求值<e>， 就是&&
                    (or <e1...en>) 就是 ||
                    (not e) 就是!
                
                (and (> x 5) (< x 10))
                (define (>= x y) (or (> x y)(= x y)))
                    
           
        1.1.7 实例：采用牛顿发求平方根
            求根，是一个假设对比的过程，二分法逼近的思想，存在误差。
               1.定义一个猜测平方根的根
               2.判断是满足精度要求
               3.满足返回guess，不满足，继续二分逼近,结果。
                
                (define (improve guess x)
                (average guess (/ x guess)))
                    
                (define (good-enough? guess x)
                (< (abs (- (square guess)x)) 0.001))
    
                (define (abs x)
                (if (< x 0) (-x) x))

                (define (average x y) (/ (+ x y) 2 ))
            
               (define (sqrt-iter guess x)
               (if (good-enough? guess x) guess (sqrt-iter (improve guess  x) x)))

               （define (sqrt x)
                (sqrt-iter 1.0 x))

    -------------------------------------------------------------------------------
        函数/过程用户关系什么？ 不关系什么？
            1.不关注过程里面的形式参数名词
            2.带名称的东西被绑定到一个作用域中，他们是相对自由的，并不是在哪里都可以出现。
        
        内部定义和块结构：
            lisp 的参数可以是定义好的函数。
                
                
               （define (sqrt x)
                    (define (good-enough? guess x)
                        (< (abs (- (square guess)x)) 0.001))
                   (define (improve guess x)
                        (average guess (/ x guess)))
                    (define (sqrt-iter guess x)
                        (if (good-enough? guess x) guess (sqrt-iter (improve guess  x) x)))
                (sqrt-iter 1.0 x))

            这种嵌套的定义称为块结构，它是最简单把过程封包到一个过程里面的方法。
            
            在这里有人产生了奇怪的想法！！！！！！！！
            x 在 定义在sqrt内 ， 函数 good-enough?，improve和sqrt-iter都在sqrt 内部定义，
            有个吊毛觉得x 在参数位置传来传去没必要，x 干脆作为自由变量，
            这样就不用在参数列表传来传去，这种方式称为词法作用域。

            块结构这种思想来自程序ALgol 60,这种结构出现在各种最新的程序设计语言里，
            帮助我们组织大程序的结构。
                
                这个狗屎一样的玩意就是闭包：

               （define (sqrt x)
                    (define (good-enough? guess )
                        (< (abs (- (square guess)x)) 0.001))
                   (define (improve guess )
                        (average guess (/ x guess)))
                    (define (sqrt-iter guess )
                        (if (good-enough? guess ) guess (sqrt-iter (improve guess  ))))
                (sqrt-iter 1.0 ))
                
                --做运算的x保留，其他的x 做参数的全部砍掉,这样的到的结果保留一致，这种写法叫做词法作用域

        1.2 过程与它们所产生的计算
            
            模式，它描述了一个计算过程的局部演化方式，也就是计算过程中欧给你的每个步骤是怎么基于前面的步骤建立起来的。
            有了模式，就可以评估一个计算过程整体来说是否优秀了。

            计算过程消耗的时间和空间的速率，是算法的指标。
        
            1.2.0 计算过程的形状
                 .1 线性的递归 和迭代

                    .1.1 demo 1 n的阶乘(递归)
                            (define (factorial n)
                                (if (= n 1)
                                1
                                (* n (factorial (- n 1)))))
                        
                    .1.2 demo2 用迭代来计算n的阶乘
                        我们可以利用1.1.5 节介绍的代换模型，观看计算6!
                            1. 使用一个product 来暂时存储变动中的乘积 
                            2. 1到n的计数器counter 

                            product <-- counter product
                            counter <--  counter + 1
                            
                            (define (factorial n)
                                (fact-iter 1 1 n)
                            )
                            (define (fact-iter product counter max-count)
                                (if (> counter max-count)
                                    product
                                    (fact-iter  (* counter product ) (+ counter 1) max-count)
                                )    
                            )
            
                迭代法和递归法的比较:
                        但是这两种方法的函数调用堆长的不一样:
                            demo1:
                                          (factorial 6)
                                     (* 6 (factorial 5)
                                (* 6 (* 5 (factorial 4))
                           (* 6 (* 5 (* 4 (factorial 3)))
                      (* 6 (* 5 (* 4 (* 3 (factorial 2))))
                 (* 6 (* 5 (* 4 (* 3 (* 2 (factorial 1)))))
                 (* 6 (* 5 (* 4 (* 3 (* 2 1)))))
                 (* 6 (* 5 (* 4 (* 3  2 ))))
                 (* 6 (* 5 (* 4 6)))
                 (* 6 (* 5 24))
                 (* 6 120)

                            demo2:
                                (factorial 6)
                                (fact-iter 1 1 6)
                                (fact-iter 1 2 6)
                                (fact-iter 2 3 6)
                                (fact-iter 6 4 6)
                                (fact-iter 24 5 6)
                                (fact-iter 120 6 6)
                                (fact-iter 720 7 6)
                
                第一种情况，解释器需要一直保持没有迭代回去的调用栈，这就是递归。
                第二种情况，对于任何一个n，在计算过程中的每一步，我们都需要保存在轨迹中。
                一般来说迭代就是用临时空间，保留每一次状态转换，知道检测到终止。(所有状态转移都被记录在迭代过程中)
                
                尾递归，总能在常量空间中执行迭代型计算过程，有了一个尾递归的实现，我们就可以利用常规的过程调用机制，
                来表示迭代。

                 .2 树形递归
                        另一种常见的计算模式称为树形递归，比如Fibonacci  数列的计算，这一序列中的每个数都是前面两个数之和。
                        0,1,1,2,3,5,8,13,21，...
                    
                一般说
                        Fib(n)={
                                0      如果 n=0 
                                1      如果 n=1 
                                否则Fib(n-1)+Fib(n-2) 否则 }
                        
                        (define (fib n)
                            (cond ((= n 0) 0）
                                  ((= n 1）1)
                                 （else (+ (fib (- n 1))
                                           (fib (- n 2))))))

                            一个层次下去分开两个函数分支，一直分叉直到拿到返回结果位置。
                            一般而言，这一展开过程看起来就像一棵树，这里的每层分裂为两个分支(除了最下面)
                            反应出fib过程的每个调用中两次递归调用自身的事实。

            如果用树形递归计算的时候，我们应该在层次结构的数据上操作，如果你想用树形计算，就必须先建立一个树型的数据结构。
                
            实例: 换零钱方式的统计
                想要得到一个迭代的fib算法需要一点点智慧。
                    一块钱零钱 拆成 0.5 元，0.25元 0.1元 0.05 元和0.01 元有几种方式。
                    
                    采用递归过程，这一问题有一种很简单的解法。
                        看中文，还不如直接看算法:
                        
                        (count-change 100)
                        (define (count-change amount)
                            (cc amount 5)
                        )
                        //计算硬币转换方式
                        
                        // 硬币种类五种，帐号一百元
                        // 帐号等于0 返回一，帐号为负数硬币种类
                        (define (cc amount kinds-of-coins)
                            (cond ((= amount 0) 1)
                                  ((or (< amount 0) (= kinds-of-coins 0)) 0)
                                  (else (+ 
                                            (cc amount (- kinds-of-coins 1)) 
                                            (cc (- amount (first-denomination kinds-of-coins))
                                                kinds-of-coins))))
                        )

                        (define (first-denomination kinds-of-coins 0)
                            (cond ((= kinds-of-coins 1) 1)
                                   ((=kinds-of-coins 2) 5) 
                                   ((=kinds-of-coins 3) 10) 
                                   ((=kinds-of-coins 4) 25) 
                                   ((=kinds-of-coins 5) 50))
                        )


                
    1.3 用高阶函数做抽象：
        过程无非是描述了一些对数的符合操作(运算叠加),(运算拆分)
        
        高阶过程：我们需要构造出这样的过程，让它们以过程作为参数，或者以过程作为返回值。
        
        1.3.1 过程作为参数
            (define (sum-integers a b)
                (if (> a b)
                0 
                (+ a (sum-integers (+ a 1) b)        
                )
            ) 
            //从 a 加到 b

        1.3.2 计算给定范围内的整数的立方之和
            (define (sum-cubes a b)
                (if (> a b)
                0 
                (+ (cube a) (sum-cubes (+ a 1) b)        
                )
            ) 

        1.3.3 计算序列之和
            (define (pi-sum a b)
                (if (> a b)
                0 
                (+ (/ 1.0 (* a (+ a 2))) (pi-sum (+ a 4) b)        
                )
            ) 
            
        这三个过程共享着一直欧冠你公共的基础模式，他们很大部分是相同的，我们可以用模板，产出上面的各个过程：
            (define (<name> a b)
                (if (> a b)
                0 
                (+ (<term> a) (<name> ( <next>  a ) b))        
                )
            ) 
            
           ----------------------------------------------- 
            (define (sum term a next  b)
                (if (> a b)
                0 
                (+ (term a) 
                (sum term ( next  a ) next b))        
                )
            ) 
            
            term 和 next 都是改变 a 的过程


        1.3.2 用lambda构造过程：
            在1.3.1 节里用sum时，我们必须定义出一些如 Pi-term和pi-next一类的简单函数，作为高阶函数的参数。
            但是我们想进一步抽象，我们可以通过引入一种lambda函数的方式

            使用lambda函数改写:
            (define (pi-sum a b)
                (sum (lambda (x) (/ 1.0 (* x (+ x 2 ))))  a  (lambda (x) (+ x 4)) b          
            )) 
            
            一般而言，lambda用与define 同样的方式创建过程,除了不为有关过程提供名字之外：
            (lambda (<formal-parameters>) <body>)
            
                lambda表达式可用作组合式的运算符，例如:
                     ((lambda (x y z) (+ x y (square z)))1 2 3 ) ==>12

                用let创建局部变量 
                    lambda 的另一个应用是创建局部变量。在一个过程里，除了使用那些已经约束为过程参数的变量外，
                    我们还需要局部变量。

                    f(x,y) = x(1+xy)^2 +y(1-y)+(1+xy)(1-y)
                        可以将它表达为
                            a= 1+xy
                            b= 1-y
                            f(x，y)=xa^2+yb+ab

                        ----------------------------
                    
                    表达方式一:
                        (define (f x y)
                            (define (f-helper a b)
                                (+ (* x (square a))
                                    (* y b)
                                    (* a b)))
                        
                            (f-helper (+ 1 (* x y)) (- 1 y))
                        )
    
                    表达方式二: 可以用一个lambda 表达式，用以描述约束局部变量的匿名过程。  
                        (define (f x y)
                            ((lambda a b)
                                (+ (* x (square a))
                                    (* y b)
                                    (* a b))
                             (+ 1 (* x y))
                             (- 1 y))         
                       )

                   表达方式三: 这一结构非常有用，因此，语言里有一个专门的特殊形式称为let,使这种编程方式更为方便。
                   利用let，过程f可以写为:
                        (define (f x y)
                            (let (
                                 (a (+ 1 (* x y )))
                                 (b (- 1 y))
                                 )
                                (+ (* x (square a))
                                    (* y b)
                                    (* a b))
                       )

                let 表达式的一般形式:
                    (let ((<var1> <exp1>))
                        。。。
                    <body>
                    )

            let 可以看作是 lambda 表达式的语法糖，表达式二和三等价，解释器不需要为局部变量添加任何新机制。
        

        1.3.3 过程作为一般性的方法:
            
            demo1: 找出函数零点 
                原理: 通过区间折半寻找方程的根:
                    f是一个连续的函数，f(x)=0 是函数的根
                    这种方法的基本思想是:
                        如果f(a)<f(b),那么a 和 b 之间必定有一个零点。
                        然后 不断逼近结果。

                代码实现:
                    (define (search f neg-point pos-point)
                        (let(( midpoint (average neg-point posint)))
                            (if (close-enough? nes-point pos-point)
                                midpoint
                                (let((test-value (f midpoint)))
                                ... 这种实例没有意义，我对数学业务不敢兴趣。
                            )
                    )
                //数学问题，我们不敢兴趣，而且没时间研究数学。
                  
        1.3.4 过程作为返回值: 函数可以作为返回值。
   
   ------------------------------------------第二章：构造数据抽象--------------------------------------
        
     lisp 提供那些原生的数据对象组合技术?

     怎么去构造出根本没有任何特定 "数据"操作？

     只是由过程形成的复合数据，是怎么样的?

     序列和树的一些常规技术？

     闭包的概念？

     闭包的应用？

        
        2.1 数据抽象导引
            2.1.1 实例:有理数上的算法运算
                作为开始，我们假定已经有了一种从分子和分母构造有理数的方法。
                并且有一种方法取得(选出) 它的分子和分母。
                (make-rat <n> <d>)返回一个有理数，分子是整数<n>,分母是整数<d>
                (number <x> )    返回有理数<x >的分子
                ( denom <x> )    返回有理数<x >的分母
            
            我们要在这里使用一种称为 按愿望思维的强有力的综合策略。

            现在我们把分数的四则运算写成，每个运算一个过程
                //分数加法
                (define (add-rat x y)
                    (make-rat( + (* (number x) (denom y))
                                 (* (number y) (denom x)))
                              (* (denom x) (denom  y))))
                                        
                // 分数减法
                (define (sub-rat x y)
                    (make-rat( - (* (number x) (denom y))
                                 (* (number y) (denom x)))
                              (* (denom x) (denom  y))))
                
                //分数乘法
                (define (mul-rat x y)
                    (make-rat (* (number x) (number  y))
                              (* (denom x)  (denom  y))))

                //分数除法
                (define (div-rat x y)
                    (make-rat (* (number x) (denom  y))
                              (* (denom x)  (number  y))))
                
                //两个分数是否相等
                (define (equal-rat? x y)
                    (=   (* (number x) (denom  y))
                         (* (number y) (denom  y))))
                
            序对
                lisp 提供一种称为序对的复合结构,这种结构是通过内置的cons构造出来。
                (define x (cons 1 2))
                (car x) 1 
                (cdr x) 2

                请注意: 序对是可以嵌套的。
                (define x (cons 1 2))
                (define y (cons 3 4))
                (define z (cons x y))
                (car(car z)) 1 
                (car(cdr z)) 3 

            只要有了序对之后，它可以用作构造任意种类的复杂数据结构的通用的基本构件。
                从序对构造起来的数据对象称为表结构数据。
                
                有理数的表示
                    (define (make-rat n d) (cons n d))
                    (define (number x) (car x))
                    (define (denom x) (cdr x))

                (define (print-rat x)
                    (newline)
                    (display (number x))
                    (display "/")
                    (display (denom x)))
                
                现在就可以试验 我们的有理数过程来:
                
                    (define one-half (make-rat 1 2))
                    (print-rat one-half) 1/2

                    (define one-third (make-rat 1 3))
                    (print-rat (add-rat one-half one-third))  5/6
                    (print-rat (mul-rat one-half one-third))  1/6 
                    (print-rat (add-rat one-third one-third)) 6/9
                        
                    (define (make-rat n d)
                        (let ((g (gcd  n d)))
                            (cons (/ n g) (/ d g))))

                     (print-rat (add-rat one-third one-third)) 2/3
                    
            2.1.2 抽象屏障
                
                形象化地表示了有理数系统的结构。其中水平先表示抽象屏障，它们隔离了系统中不同的层次。
            
                层次隔离的是什么？
                    隔离了使用 和 实现。

                举个有理数系统的例子:
                    我们把有理数的计算功能包,作为公共包给大家开放使用, 
                                
                        ———————————————————使用有理数的程序———————————————————————
                            用户自定义的自由发挥的一层 ：有个运算，要用加法，又要用减法                   
    
                        ————————————————————问题域中的有理数—————————————————————
                            领域抽象操作：add-rat  sub-rat

                        ———————————————————作为分子和分母的有理数————————————————
                            数据抽象第一层：make-rat   numer denom                            

                        ———————————————————————作为序对的有理数——————————————————
                            lisp底层的复合数据结构实现： cons car cdr

                基于层次做抽象隔离的优点:
                    1.  第一个优点：这样的程序容易维护和修改.
                    2.  任一一种比较复杂的数据结构，
                        都可以以多种不同的方式用程序设计语言提供的基本数据结构表示。
                        (底层数据结构，留给后人修改的空间，也许我做的不是很好，但是我留个口子让别人修改)
                        (至少我在数据抽象层/领域抽象层的贡献还是有意义的)
                    
            2.1.3 数据意味着什么？
                数据是什么? 
                    数据只是想java 中bean的存在(由给定的构造函数和选择函数)。

                数据bean能通过过程实现吗 ？
                    (define (cons x y)
                        (define (dispatch m)
                            (cond ((= m 0) x)
                                  ((= m 1) y)
                                  (else (error "Argument not 0 or 1 -- CONS" m))))
                        dispatch
                        )
                    
                    (define (car z) (z 0))
                    (define (cdr z) (z 1))

                    --本质：参数状态保存在过程中。

                这样用的话，程序的很多状态都在过程里面，但是这里少了一个持久化状态的使用。

               --这个模式看上去很好玩，但实际上，数据的过程性表示将在我们的程序设计宝库里扮演一种核心角色，
               这种有关的程序设计风格通常称为消息传递。
                    (消息传递可以用它作为建模的基本工具)

             2.2 层次性数据和闭包性质:
                一般说，某种组合数据对象的操作满足闭包性质,通过它组合起数据对象得到的结果本身还可以通过同样的操作再进行组合。
                闭包就像指针链
                有了闭包我们可以建立起层次行的结构。

                从第一章开始，我们在处理过程的问题就利用了闭包性质，而且是最本质的东西，因为除了最简单的程序外，
                    所有程序都依赖于一个事实：
                        组合式的成员本身还可以是组合式。


            2.2.1 闭包会产生什么问题?
                
                .1 用序对来表示序列和树
                        
                      demo1：序列的表示：
                            利用序对可以构造出一种常用的数据结构，序列,一批数据对象的一种有序汇集。

                            将序列 1,2,3,4 表示为序对的链
                            (cons 1 (cons 2 (cons 3 (cons 4 nil))))
                                
                            通过嵌套cons形成的这样的一个序对的序列成为一个表，Scheme为方便表的构造，
                            提供了一个语法糖 
                            list< <a1> <a2> <a3> <a4>

                     demo2: 序列的使用
                        (define one-through-four (list 1 2 3 4))
                        one-through-four
                        (1 2 3 4)

                        不要将表达式 (list 1 2 3 4)和 表(1 2 3 4)搞混了

                        (car one-through-four) 
                            (car (cons 1 (cons 2 (cons 3 (cons 4 nil))))) 
                            car (cons 1 ...) ==》1
                        
                        (cdr one-through-four) 
                            (2 3 4) ==> 不是值，是把表的指针取出来了

                        (car (cdr one-through))  ==>2

                        (cons 10 one-through-four)==>(10 1 2 3 4)

                        (cons 5  one-through-four)==>(5 1 2 3 4)

                       demo3: 表操作
                            利用序对将元素的序列表示为表之后,我们就可以使用常规的程序设计技术,
                            通过"向下cdr"表的方式完成对表的各种操作。
                            例如，下面的过程list-ref的实际参数是一个表和一个数n，它的返回这个表中的第n个项。

                        这里人们习惯令表元素的编号从0开始，计算list-ref的方法如下： 
                            对n=0，list-ref 应返回表的car。
                            否则，list-ref 返回表的cdr的第(n-1)个项。

                        //实现取出序列中的某一位
                        (define (list-ref items n)
                            if ( = n 0)
                               (car items)
                               (list-ref(cdr items)(- n 1))))
                            
                            (define squares (list 1 4 9 16 25))

                            (list-ref squares 3)
                               ==> 16 

                        //计算序列长度
                        (define (length items)
                            (if (null? items)
                                0 
                                (+1 (length(cdr items)))))

                        (define odds (list 1 3 5 7))
                        (length odds) ==> 4

                        // 迭代法计算长度
                            (define (length items)
                                (define  (length-iter a count)
                                (if (null? a)
                                    counte
                                    (length-iter (cdr a) (+ 1 count))))
                            (length-iter items 0))

                        //另一种常用程序设计技术是在向下cdr一个表的过程中"向上cons"出结果表，
                        例如 append：
                            (define (append list1 list2)
                                if( null? list1)
                                list2 
                                (cons (car list1) (append (cdr list1) list2))))
                            
                            // 如果list1是空表，结果就是list2
                            //否则应先做出list1和cdr和list2的append，而后在将list1的car通过cons加到前面

                            //有点恶心的写法，左边一个个追加，右边不动，直接连上去。

                    .2 对表的映射 map
                        一个特别有用的操作是将某种应用于一个表的所有元素，得到所有结果构成的表。
                        
                        demo1：
                        
                           (define (scale-list items factor)
                                (if (null？items)
                                    nil 
                                    (cons (* (car items) factor)
                                          (scale-list (cdr items) factor))
                                )
                            )
                            ==》对表中的每一个元素进行遍历操作。
                            
                          (scale-list (list 1 2 3 4 5) 10) ==> (10 20 30 40 50) 

                    demo2:
                        我们可以抽象出具有一般性的想法,将其中的公共模式表述为一个高阶过程，
                        
                        ( define (map proc items)
                            (if (null？ items)
                                nil
                                (cons (proc (car items))
                                      (map proc (cdr items)))
                                )
                        )
                        
                        (map abs (list  -10 2.5 -11.6 17))
                        (10 2.5 11.6 17)

                        (map (lambda (x)  (* x x))
                             (list 1 2 3 4))
                        ==> (1 4 9 16)

                     现在我们可以用map给出scale-list 的一个新定义：
                        (define (scale-list items factors)
                            (map (lambda (x) (* x factor))
                            items ))
                        
                    map 是一种很重要的结构，他可以代表一直公共模式，它建立一种处理表的高层抽象。
                    map帮我们建立了一层抽象屏障，实现表变换的过程的实现，与如何提取表中元素以及组合结果
                    的细节隔离开。

        2.2.2 层次性结构:
            将表作为序列的表示方式，可以很自然地推广到元素本身也是序列。
            如：
                (cons  (list 1 2) (list 3 4)) ==》 ((1 2) 3 4)
            
            识别这种元算本身也是序列的序列的另一种方式,是把它们看作树。 
            序列里的元算就是树的分支，本身也是序列的元素就形成树中的子树。

                递归是处理树的基本工具。
                我们通常把对于树的操作归结为对它们分支的操作，
                再将这种欧冠你操作归结为对分支的分支的操作，
                直到到了叶子结点为止。

           (define x (cons (list 1 2) (list 3 4)))
           
                (length x) ==>3 
                (count-leaves x) ==> 4 
            
                (list x x)
                ==>(((1 2)3 4)  ((1 2) 3 4)))
                
                (length (list x x)) ==>2 

                (count-leaves (list x x)) ==>8

                (define (count-leaves x)
                    (cond ((null? x) 0)
                          ((not (pair? x)) 1)
                          (else (+ (count-leaves (car x))
                                    (count-leaves (cdr x)))))
                )

            
            2.2.3 序列作为一种约定的界面:
                技巧一：.用lambda表达式作为参数，加上使用抽象的复合数据结构，
                         加上迭代整合到一起的代码，能使程序能够保持很好的弹性。

                技巧二:
                    使用约定的界面:
                        让我们先看两段程序：
                            proc1:
                               //以一颗树作为参数，计算出那些值的奇数的叶子的平方和

                               //枚举出一颗树的树叶
                               // 过滤它们，选出其中的奇数
                               //对选出的每一个数求平方
                               //用+累积起得到的结果，从0开始

                               (define (sum-odd-squares tree)
                                    (cond (( null？ tree) 0)
                                         ((not (pair? tree))
                                            (if (odd？tree) (square tree) 0))
                                            (else (+ (sum-odd-squares (car tree))
                                                     (sum-odd-squares (cdr tree)))))
                                )

                                过程可以链式的黑盒子处理：
                                     sum-odd-squares,我们从一个枚举器开始
                                    enumerate(枚举器) -- (产生给定树的所有树叶节点) -->
                                       filter(过滤器)--(odd? 不是奇数就过滤掉)-->
                                          map(映射器)--(转换装置)-->它将square应用于每个元素
                                   accumulate(累积器)--(该装置用+将得到的所有元素组合起来)
                            
                            proc2：
                                // 枚举从0到n的整数
                                //对每个整数计算相应的fib数
                                // 过滤它们，选出其中的偶数
                                // 用cons 累积得到的结果，从空表开始

                            (define (even-fibs n)
                                (define (next k)
                                (if (> k n)
                                    nil
                                    (let ((f (fib k)))
                                        (if (even? f)
                                            (cons f(next  (+ k 1)))
                                            (next (+ k1))))))
                                (next 0))
                                
                    序列操作:
                        怎么把过程做拆分，关注"信号" 流向。
                        (map square(list 1 2 3 4 5))
                            --(1 4 9 16 25)
                        
                        过滤一个序列，也就是选出其中满足某个给定谓词的元素，可以按下面方式做:
                            (define (filter predicate sequence)
                                (cond ((null? sequence) nil)
                                 (( predicate(car sequence))
                                    (cons (car sequence)
                                           (filter predicate (cdr sequence))))
                                            (else (filter predicate(cdr sequence)))))
                        
                        例如: (filter odd? (list 1 2 3 4 5))
                              (1 3 5)
                        
                              累积工作可以实现如下:
                               (define (accumulate op initial sequence)
                                    (if(null? sequence)
                                       initial
                                       (op (car sequence)
                                            (accumulate op initial (cdr sequence))))
                               )
                        
                             (accumulate + 0 (list 1 2 3 4 5)) ==>15
                             (accumulate * 1 (list 1 2 3 4 5)) ==> 120
                             (accumulate cons nil (list 1 2 3 4 5)) ==>(1 2 3 4 5)

                                 (define (sum-odd-squares tree)
                                    (accumulate + 0 (map square
                                                        (filter odd?
                                                            (enumerate-tree tree))))
                                 )

                                 (define (even-fibs n)
                                     (accumulate cons
                                            nil
                                            (filter even? 
                                                (map fib 
                                                    (enumerate-initial 0 n))
                                        )
                                 ))
                            
                        链式调用帮助我们得到模块化代码,推动部件的封装。
                        很多模块是标准化的，有的有框架，有的是库。
                            (define (salary-of-highest-paid-programer records)
                                (accumulate max
                                             0
                                             (map salary 
                                                (filter programer? records)
                                             )
                                )
                            )

                嵌套映射:
                    (计算有点难)

                实例: 一个图形语言
                    
                    



                


    





















-----------------------------------------------------------------------------------------------------




















                


                .2 如何以某种生动的形式显示闭包的图形语言

















                    
    
    
                
                    

        
