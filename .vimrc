""""""""""""""vim的精髓是什么?"""""""""""""""""""""""""""""""
"""      1.插件表现为特定命令
"""      2.特定命令可转为普通模式下的自定义快捷键
"------------------------------------------------------------


""""""""""""""""我用vim编辑的对象主体""""""""""""""""""""""
"""     1.纯文本
"""     2.yaml文件
"""     3.go文件
"""     4.
"""     5.
"------------------------------------------------------------


"""""""""""""""""效率工具选型"""""""""""""""""""""""""""""""
""" 插件使用 101,15
""" 注释插件 116,5
""" git插件 
"""
""" LSP支持
"""
"""
"""
"""
"""
"""
"""
"""
"""
"""
"""
"""
"""
"""
"""
"""
"""
"""
"""
"""
"""
"""
"""
"""

















"""""""""""""""1.nerdtree""""""""""""""""""""""""""""""""""""
"""""""""""""""2.tab"""""""""""""""""""""""""""""""
"""""""""""""""3.复制粘贴插件"""""""""""""""""""""""""""""""
"""""""""""""""3.fzf"""""""""""""""""""""""""""""""
"""""""""""""""4.注解插件""""""""""""""""""""""""""""""
"""""""""""""""5. 多光标"""""""""""""""""""""""""""""
"""""""""""""""6.代码补全 """""""""""""""""""""""""""""""
"""""""""""""""7.语法检查 """""""""""""""""""""""""""""""
"""""""""""""""8.检索  """""""""""""""""""""""""""""""
"""""""""""""""9.字符串替换"""""""""""""""""""""""""""""""
"""""""""""""""10.符号跳转"""""""""""""""""""""""""""""""
"""""""""""""""11.美化"""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""




""" 插件使用
"""-- 插件安装 :plugininstall
"""-- 插件删除 :plugindelete
"""-- 插件更新 :pluginupdate
"""-- 单个插件更新 :pluginupdate nerdtree
"""-- 插件查询 :pluginstatus
"""-- 插件回滚 :plugindiff
"""--
"""--
"""--





""" 注释插件使用
""" 普通 gcc 单行注释
"""--


"""  git 插件使用
"&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
" Plug 'tpope/vim-fugitive'
"
"
"
"&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
"""--
"""--
"""--
"""--
"""--
"""--
"""--


""" language server Protocol
""" &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
""" 什么是LSP？
""" -- 认清一个事实，代码补全、跳转定义，语法检查是语言平台提供的支持，
"""     编辑器最多就是帮助我们去简化使用这些工具的过程。
"""     LSP 是一种降低IDE提供者在为特定语言的平台的集成工具做插件的成本的协议。
"""     lsp是中间层，屏蔽语言差异，ide厂商肯定不想为每一个语言环境做定制化插件集。
"""
""" 为什么用LSP插件？
""" 不用LSP插件，你自己开发插件? 
""" 
""" LSP支持那些常见语言工具常见功能？
""" --自动补全 
""" --跳转定义
""" --悬空文档
""" 
""" 
"" lsp客户端选型？ 
""" -- 我是用vim的，我选vim-lsp(他是vimsript写的)
""" 
""" lsp 客户配置？
""" 参考资料： https://github.com/prabirshrestha/vim-lsp
"""
"""
"""
"""
"""
"""
"""
"""
"""
"""
"""
"""
"""
"""
"""
"""
"""
"""
"""
"""
"""
""" gopls,GO的lps服务器实现，功能包括？
""" --
""" --
""" --
""" --
""" --
""" --
""" --
""" --
""" --
""" --
""" --
"""
"""
"""
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
"""--
































































































"""""快捷键设置""""""""""""""""""""""""""""""""
"""""鼠标""""""""""""""""""""""""""""""""
set mouse=a
set clipboard=autoselect
set clipboard=unnamed
set clipboard=unnamedplus
vnoremap <C-y> "+y
"""""快捷键设置""""""""""""""""""""""""""""""""
let mapleader='ljj'

"""""日常操作命令""""""""""""""""""""""""""""""
"""退出
nnoremap <Leader>q :quit!<CR>
""" 保存退出
nnoremap <Leader>wq :wq<CR>

"""模式切换 
""""        i文本编辑模式，
""""        什么都不按普通模式
""""        :命令模式 
""""        v 可视化模式

""""""文本的增删改查
"" dd 是剪切一行
"" yy  光标向下复制，5yy复制五行
"" p 是粘贴一行
"" 通用公式：数字+操作 如 10dd 就是剪切十行。 
"" u 取消修改，U取消u

""""""光标操作
"" gg 光标到第一行，10gg 光标到第十行。 
"" GG 关标到全文行尾
"" hjkl 左下上右
"" o 下方插入
"""命令 0y$ 意味着复制光标当前所在行所有内容。
"""}       移动光标到当前段落的末尾
"""{       移到光标到当前段落的开头

"""页面跳转
"""Ctrl + f       向前滚动一页
"""Ctrl + b       向后滚动一页
"""Ctrl + u       向前滚动半页
"""Ctrl + d       向后滚动半页

""" 搜索跳转 f +搜索字符

""" dd 是剪切一行
""" dd 是剪切一行
""" dd 是剪切一行
""" dd 是剪切一行
""" dd 是剪切一行

"""""备注插件"""""""""""""""""""""""""""""""""""""
""" dd 是剪切一行

"""""树形插件配置""""""""""""""""""""""""""""""
nnoremap <Leader>tree :NERDTree<CR>
nnoremap <Leader>treeb :NERDTreeFocus<CR>
nnoremap <Leader>treec :NERDTreeToggle<CR>
"""""""标签命令快捷配置"""""""""""""""""""""""""
nnoremap <Leader>tb :tabnew<CR>
nnoremap <Leader>tbc :tab<CR>
"""设置切换tab gt是快捷键，3gt切换到第三个卡片。
"""nerdtree 按文件按t是tab方式打开。
""""""""""""""""""""""""""""""""""""""""""""""








filetype on
filetype plugin on

set incsearch
set ignorecase
set nocompatible
set wildmenu
syntax enable
syntax on

" 基于缩进或语法进行代码折叠
"set foldmethod=indent
set foldmethod=syntax
" 启动 vim 时关闭折叠代码
set nofoldenable

"操作：za，打开或关闭当前折叠；zM，关闭所有折叠；zR，打开所有折叠。

" 自适应不同语言的智能缩进
filetype indent on
" 将制表符扩展为空格
set expandtab
" 设置编辑时制表符占用空格数
set tabstop=4
" 设置格式化时制表符占用空格数
set shiftwidth=4
" 让 vim 把连续数量的空格视为一个制表符
set softtabstop=4

nmap LB 0
nmap LE $

set nu                                                                          
set incsearch

let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

" Run PlugInstall if there are missing plugins
autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \| PlugInstall --sync | source $MYVIMRC
\| endif

call plug#begin('~/.vim/plugged')
Plug 'scrooloose/nerdtree'
Plug 'joom/vim-commentary'
Plug 'tpope/vim-fugitive'
"
call plug#end()

"文件树

" 文件树设置 {{{
" 关闭NERDTree快捷键
map <leader>t :NERDTreeToggle<CR>
""当NERDTree为剩下的唯一窗口时自动关闭
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
""修改树的显示图标
let g:NERDTreeDirArrowExpandable = '►'
let g:NERDTreeDirArrowCollapsible = '▼'
let NERDTreeAutoCenter=1
" 显示行号
let NERDTreeShowLineNumbers=1
" 是否显示隐藏文
" 设置宽度
let NERDTreeWinSize=25
" 在终端启动vim时，共享NERDTree
let g:nerdtree_tabs_open_on_console_startup=1
" 忽略一下文件的显示
let NERDTreeIgnore=['\.pyc','\~$','\.swp']
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \ }
" }}}


